#!/bin/bash

# Get the current user's home directory
USER_HOME=$HOME

# Step 1: Generate LLVM IR file
echo "Step 1: Generate LLVM IR file"
clang -g -O0 -Xclang -disable-O0-optnone -S -emit-llvm -Wall -Wextra -o $USER_HOME/CoSense/applications/newton/llvm-ir/floating_point_operations.ll $USER_HOME/CoSense/applications/newton/llvm-ir/c-files/floating_point_operations.c

# Step 2: Use newton for optimization and quantization
echo "Step 2: Use newton for optimization and quantization"
cd $USER_HOME/CoSense/src/newton && ./newton-linux-EN --llvm-ir=$USER_HOME/CoSense/applications/newton/llvm-ir/floating_point_operations.ll --llvm-ir-liveness-check --llvm-ir-auto-quantization $USER_HOME/CoSense/applications/newton/sensors/test.nt

# Step 3: Convert generated bytecode file to LLVM IR file
echo "Step 3: Convert generated bytecode file to LLVM IR file"
llvm-dis $USER_HOME/CoSense/applications/newton/llvm-ir/floating_point_operations_output.bc -o $USER_HOME/CoSense/applications/newton/llvm-ir/floating_point_operations_output.ll

# Step 4: Optimize the generated LLVM IR file
echo "Step 4: Optimize the generated LLVM IR file"
opt $USER_HOME/CoSense/applications/newton/llvm-ir/floating_point_operations_output.ll --simplifycfg --instsimplify -O3 -Os -S -o $USER_HOME/CoSense/applications/newton/llvm-ir/out.llperformace

# Step 5: Compile the optimized LLVM IR file to bitcode
echo "Step 5: Compile the optimized LLVM IR file to bitcode"
llvm-as $USER_HOME/CoSense/applications/newton/llvm-ir/out.llperformace -o $USER_HOME/CoSense/applications/newton/llvm-ir/out.bc

# Step 6: Compile the bitcode file to assembly
echo "Step 6: Compile the bitcode file to assembly"
llc $USER_HOME/CoSense/applications/newton/llvm-ir/out.bc -o $USER_HOME/CoSense/applications/newton/llvm-ir/out.s

# Step 7: Compile the assembly file to object file
echo "Step 7: Compile the assembly file to object file"
clang -c $USER_HOME/CoSense/applications/newton/llvm-ir/out.s -o $USER_HOME/CoSense/applications/newton/llvm-ir/out.o

# Step 8: Package the object file into a static library
echo "Step 8: Package the object file into a static library"
ar -rc $USER_HOME/CoSense/applications/newton/llvm-ir/libout.a $USER_HOME/CoSense/applications/newton/llvm-ir/out.o

# Step 9: Compile the test file and link with the static library
echo "Step 9: Compile the test file and link with the static library"
clang $USER_HOME/CoSense/applications/newton/llvm-ir/c-files/test_floating_point_operations.c -no-pie -L$USER_HOME/CoSense/applications/newton/llvm-ir -lout -O3 -Os -g -fno-builtin -o $USER_HOME/CoSense/applications/newton/llvm-ir/main_out -lm

# Step 10: Run the test executable
echo "Step 10: Run the test executable"
$USER_HOME/CoSense/applications/newton/llvm-ir/main_out

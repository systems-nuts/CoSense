#!/bin/bash
# Usage: ./run_algorithm.sh [MadgwickAHRS|MahonyAHRS]
# If no argument is provided, it defaults to MadgwickAHRS

# Set the algorithm name based on the first command-line argument, default to MadgwickAHRS
#ALGO=${1:-MadgwickAHRS}
#
## Validate the input (optional)
#if [[ "$ALGO" != "MadgwickAHRS" && "$ALGO" != "MahonyAHRS" ]]; then
#    echo "Error: Unknown algorithm '$ALGO'. Please use either 'MadgwickAHRS' or 'MahonyAHRS'."
#    exit 1
#fi
ALGO="sensfusion6"
echo "Selected algorithm: $ALGO"

# Step 1: Generate LLVM IR file
echo "Step 1: Generate LLVM IR file"
clang -g0 -O0 -Xclang -disable-O0-optnone -S -emit-llvm -Wall -Wextra \
  -o "$HOME/CoSense/applications/newton/llvm-ir/${ALGO}.ll" \
  "$HOME/CoSense/applications/newton/llvm-ir/c-files/${ALGO}.c"

# Optimize the LLVM IR file with mem2reg
opt "$HOME/CoSense/applications/newton/llvm-ir/${ALGO}.ll" --mem2reg -S \
  -o "$HOME/CoSense/applications/newton/llvm-ir/${ALGO}.ll"

# Step 2: Use newton for optimization and quantization
echo "Step 2: Use newton for optimization and quantization"
cd "$HOME/CoSense/src/newton" && \
  ./newton-linux-EN --llvm-ir="$HOME/CoSense/applications/newton/llvm-ir/${ALGO}.ll" \
    --llvm-ir-liveness-check --llvm-ir-auto-quantization \
    "$HOME/CoSense/applications/newton/sensors/BMX055.nt"

# Step 3: Convert generated bytecode file to LLVM IR file
echo "Step 3: Convert generated bytecode file to LLVM IR file"
llvm-dis "$HOME/CoSense/applications/newton/llvm-ir/${ALGO}_output.bc" \
  -o "$HOME/CoSense/applications/newton/llvm-ir/${ALGO}_opt.ll"
cd "$HOME/CoSense/applications/newton/llvm-ir" && ./replace.sh "$HOME/CoSense/applications/newton/llvm-ir/${ALGO}_opt.ll"

# Step 4: Optimize the generated LLVM IR file further
echo "Step 4: Optimize the generated LLVM IR file"
opt -inline "$HOME/CoSense/applications/newton/llvm-ir/${ALGO}_output.ll" --mem2reg -S \
  -o "$HOME/CoSense/applications/newton/llvm-ir/out.ll"

# Step 5: Compile the optimized LLVM IR file to bitcode
echo "Step 5: Compile the optimized LLVM IR file to bitcode"
llvm-as "$HOME/CoSense/applications/newton/llvm-ir/out.ll" -o "$HOME/CoSense/applications/newton/llvm-ir/out.bc"

# Step 6: Compile the bitcode file to assembly
echo "Step 6: Compile the bitcode file to assembly"
llc "$HOME/CoSense/applications/newton/llvm-ir/out.bc" -o "$HOME/CoSense/applications/newton/llvm-ir/out.s"

# Step 7: Compile the assembly file to an object file
echo "Step 7: Compile the assembly file to object file"
clang -c "$HOME/CoSense/applications/newton/llvm-ir/out.s" -o "$HOME/CoSense/applications/newton/llvm-ir/out.o"

# Step 8: Package the object file into a static library
echo "Step 8: Package the object file into a static library"
ar -rc "$HOME/CoSense/applications/newton/llvm-ir/libout.a" "$HOME/CoSense/applications/newton/llvm-ir/out.o"

# Step 9: Compile the test file and link with the static library
echo "Step 9: Compile the test file and link with the static library"
clang  "$HOME/CoSense/applications/newton/llvm-ir/c-files/test_${ALGO}.c" -D INT_DATA_TYPE -no-pie \
  -L"$HOME/CoSense/applications/newton/llvm-ir" -lout -O3 -Os -g \
  -o "$HOME/CoSense/applications/newton/llvm-ir/main_out" -lm

# Step 10: Run the test executable
echo "Step 10: Run the test executable"
"$HOME/CoSense/applications/newton/llvm-ir/main_out"
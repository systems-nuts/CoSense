#!/bin/bash

# Get the current user's home directory
USER_HOME=$HOME

FILE_PATH="$HOME/CoSense/applications/newton/llvm-ir/MahonyAHRS_opt.ll"

 #Step 1: Generate LLVM IR file
echo "Step 1: Generate LLVM IR file"
clang -g0 -O0  -Xclang -disable-O0-optnone  -S -emit-llvm -Wall -Wextra  -o $HOME/CoSense/applications/newton/llvm-ir/MahonyAHRS.ll $HOME/CoSense/applications/newton/llvm-ir/c-files/MahonyAHRS.c

# Step 2: Use newton for optimization and quantization
echo "Step 2: Use newton for optimization and quantization"
#cd $HOME/CoSense/src/newton && ./newton-linux-EN --llvm-ir=$HOME/CoSense/applications/newton/llvm-ir/MahonyAHRS.ll --llvm-ir-liveness-check --llvm-ir-auto-quantization $HOME/CoSense/applications/newton/sensors/test.nt

cd $HOME/CoSense/src/newton && ./newton-linux-EN --llvm-ir=$HOME/CoSense/applications/newton/llvm-ir/MahonyAHRS.ll --llvm-ir-liveness-check --llvm-ir-auto-quantization $HOME/CoSense/applications/newton/sensors/BMX055.nt
#
# Step 3: Convert generated bytecode file to LLVM IR file
echo "Step 3: Convert generated bytecode file to LLVM IR file"
#llvm-dis $HOME/CoSense/applications/newton/llvm-ir/MahonyAHRS_opt.bc -o $HOME/CoSense/applications/newton/llvm-ir/MahonyAHRS_opt.ll
cd $HOME/CoSense/applications/newton/llvm-ir/&&
./replace.sh $HOME/CoSense/applications/newton/llvm-ir/MadgwickAHRS_opt.ll

#python3 replace.py


# Step 4: Optimize the generated LLVM IR file
echo "Step 4: Optimize the generated LLVM IR file"
#opt  $HOME/CoSense/applications/newton/llvm-ir/MahonyAHRS_opt.ll   -S -o $HOME/CoSense/applications/newton/llvm-ir/out.ll
opt -mem2reg  $HOME/CoSense/applications/newton/llvm-ir/MadgwickAHRS_opt.ll   -S -o $HOME/CoSense/applications/newton/llvm-ir/out.ll
#opt $HOME/CoSense/applications/newton/llvm-ir/MahonyAHRS_opt.ll -O3 -Os  -S -o $HOME/CoSense/applications/newton/llvm-ir/out.ll

# Step 5: Compile the optimized LLVM IR file to bitcode
echo "Step 5: Compile the optimized LLVM IR file to bitcode"
llvm-as $HOME/CoSense/applications/newton/llvm-ir/out.ll -o $HOME/CoSense/applications/newton/llvm-ir/out.bc

# Step 6: Compile the bitcode file to assembly
echo "Step 6: Compile the bitcode file to assembly"
llc $HOME/CoSense/applications/newton/llvm-ir/out.bc -o $HOME/CoSense/applications/newton/llvm-ir/out.s

# Step 7: Compile the assembly file to object file
echo "Step 7: Compile the assembly file to object file"
clang -c $HOME/CoSense/applications/newton/llvm-ir/out.s -o $HOME/CoSense/applications/newton/llvm-ir/out.o

# Step 8: Package the object file into a static library
echo "Step 8: Package the object file into a static library"
ar -rc $HOME/CoSense/applications/newton/llvm-ir/libout.a $HOME/CoSense/applications/newton/llvm-ir/out.o

# Step 9: Compile the test file and link with the static library
echo "Step 9: Compile the test file and link with the static library"

#clang $HOME/CoSense/applications/newton/llvm-ir/test_madgwick.c -D INT_DATA_TYPE -no-pie -L$HOME/CoSense/applications/newton/llvm-ir -lout -O3 -Os -g -fno-builtin -o $HOME/CoSense/applications/newton/llvm-ir/main_out -lm

#clang $HOME/CoSense/applications/newton/llvm-ir/test_madgwick.c -D FP_DATA_TYPE -no-pie -L$HOME/CoSense/applications/newton/llvm-ir -lout -O3 -Os -g -fno-builtin -o $HOME/CoSense/applications/newton/llvm-ir/main_out -lm

# Step 10: Run the test executable
#echo "Step 10: Run the test executable"
#$HOME/CoSense/applications/newton/llvm-ir/main_out

